syntax = "proto2";
package bnet.protocol.channel;
import "bnet/protocol_0.proto";
import "bnet/protocol/attribute.proto";


message GetChannelIdRequest {
}

message SubscribeChannelResponse {
	optional uint64 object_id = 1;
}

message CreateChannelResponse {
	required uint64 object_id = 1;
	optional .bnet.protocol.EntityId channel_id = 2;
}

message DissolveRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	optional uint32 reason = 2;
}

message FindChannelOptions {
	optional uint32 start_index = 1 [default = 0];
	optional uint32 max_results = 2 [default = 16];
	optional string name = 3;
	optional fixed32 program = 4;
	optional fixed32 locale = 5;
	optional uint32 capacity_full = 6;
	required .bnet.protocol.attribute.AttributeFilter attribute_filter = 7;
	optional string channel_type = 8;
}

message GetChannelIdResponse {
	optional .bnet.protocol.EntityId channel_id = 1;
}

message GetChannelInfoRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId channel_id = 2;
	optional bool fetch_state = 3 [default = false];
	optional bool fetch_members = 4 [default = false];
}

message JoinChannelResponse {
	optional uint64 object_id = 1;
	optional bool require_friend_validation = 2 [default = false];
	repeated .bnet.protocol.EntityId privileged_account = 3;
}

message LeaveNotification {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3;
}

message MemberState {
	repeated .bnet.protocol.attribute.Attribute attribute = 1;
	repeated uint32 role = 2;
	optional uint64 privileges = 3 [default = 0];
	optional .bnet.protocol.AccountInfo info = 4;
	optional bool hidden = 5 [default = false];
}

message Message {
	repeated .bnet.protocol.attribute.Attribute attribute = 1;
	optional uint32 role = 2;
}

message RemoveMemberRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3;
}

message RemoveNotification {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId member_id = 2;
	optional uint32 reason = 3;
}

message SendMessageNotification {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.channel.Message message = 2;
	optional uint64 required_privileges = 3 [default = 0];
}

message SendMessageRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.channel.Message message = 2;
	optional uint64 required_privileges = 3 [default = 0];
}

message SetRolesRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	repeated uint32 role = 2;
	repeated .bnet.protocol.EntityId member_id = 3;
}

message SubscribeChannelRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId channel_id = 2;
	required uint64 object_id = 3;
}

message UnsubscribeMemberRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.EntityId member_id = 2;
}

message AddMemberRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	required .bnet.protocol.Identity member_identity = 2;
	required .bnet.protocol.channel.MemberState member_state = 3;
	required uint64 object_id = 4;
	optional bool subscribe = 5 [default = true];
}

message FindChannelRequest {
	optional .bnet.protocol.Identity agent_identity = 1;
	required .bnet.protocol.channel.FindChannelOptions options = 2;
}

message JoinChannelRequest {
	optional .bnet.protocol.Identity agent_identity = 1;
	optional .bnet.protocol.channel.MemberState member_state = 2;
	required .bnet.protocol.EntityId channel_id = 3;
	required uint64 object_id = 4;
	repeated .bnet.protocol.EntityId friend_account_id = 5;
	optional bool local_subscriber = 6 [default = true];
}

message Member {
	required .bnet.protocol.Identity identity = 1;
	required .bnet.protocol.channel.MemberState state = 2;
}

message JoinNotification {
	required .bnet.protocol.channel.Member member = 1;
}

message UpdateMemberStateNotification {
	optional .bnet.protocol.EntityId agent_id = 1;
	repeated .bnet.protocol.channel.Member state_change = 2;
	repeated uint32 removed_role = 3;
}

message UpdateMemberStateRequest {
	optional .bnet.protocol.EntityId agent_id = 1;
	repeated .bnet.protocol.channel.Member state_change = 2;
	repeated uint32 removed_role = 3;
}

